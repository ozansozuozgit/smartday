// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  goals         Goal[]
  completedGoals String[] // An array of IDs of completed goals
  categories    Category[]
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now()) // New field for the creation timestamp

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id       String  @id @default(cuid())
  name     String  // Name of the activity
  percentage Float // Percentage of the day spent on the activity
  goalId   String // The ID of the goal the activity is associated with
  goal     Goal   @relation(fields: [goalId], references: [id])
  categoryId String // The ID of the category the activity is associated with
  category Category @relation(fields: [categoryId], references: [id])
  alignsWithGoal Boolean @default(false)
  createdAt DateTime @default(now()) // New field for the creation timestamp
  updatedAt DateTime? @updatedAt

}

model Category {
  id        String     @id @default(cuid())
  name      String
  activities Activity[]
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}
model Goal {
  id          String     @id @default(cuid())
  name        String     // Name of the goal
  percentage  Float?      // Total percentage of the goal completed
  createdAt   DateTime @default(now()) // New field for the creation timestamp
  userId      String     // The ID of the user who created the goal
  user        User       @relation(fields: [userId], references: [id])
  activities  Activity[] // The activities associated with the goal
  updatedAt DateTime? @updatedAt
  deletedAt  DateTime?  // Soft delete field

}
